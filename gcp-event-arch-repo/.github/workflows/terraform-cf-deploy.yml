
name: terraform-cf-deploy
on:
  push: { branches: [ "main" ] }
  workflow_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }
    env: { TF_IN_AUTOMATION: true }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Zip Cloud Function
        run: cd infra/function && zip -r ../function.zip . && ls -lh ../function.zip
      - uses: google-github-actions/setup-gcloud@v2
      - uses: google-github-actions/auth@v2
        with: { credentials_json: ${{ secrets.GCP_CREDENTIALS }} }
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.7.5 }
      - name: Upload function.zip to code bucket
        run: |
          CODE_BUCKET=$(grep '^code_bucket_name' infra/terraform.tfvars | awk -F'=' '{print $2}' | tr -d ' "')
          if [ -z "$CODE_BUCKET" ]; then echo "code_bucket_name not found"; exit 1; fi
          SHA=${{ github.sha }}
          OBJECT_PATH=function/function-${SHA}.zip
          gsutil cp infra/function.zip gs://$CODE_BUCKET/$OBJECT_PATH
          echo "TF_VAR_source_object_path=$OBJECT_PATH" >> $GITHUB_ENV
      - name: Terraform Init
        working-directory: infra
        run: terraform init
      - name: Terraform Fmt & Validate
        working-directory: infra
        run: terraform fmt -recursive && terraform validate
      - name: Terraform Plan
        working-directory: infra
        env: { TF_VAR_source_object_path: ${{ env.TF_VAR_source_object_path }} }
        run: terraform plan -var-file=terraform.tfvars
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: infra
        env: { TF_VAR_source_object_path: ${{ env.TF_VAR_source_object_path }} }
        run: terraform apply -var-file=terraform.tfvars -auto-approve
